from openai import AsyncOpenAI
from config import GROQ_API_KEY

# Groq –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
client = AsyncOpenAI(
    api_key=GROQ_API_KEY,
    base_url="https://api.groq.com/openai/v1"
)

ANALYSIS_PROMPT = """
–¢—ã ‚Äî ArkheAI, –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π –≤–µ–Ω—á—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –æ—Ü–µ–Ω—â–∏–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤.
–ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ, —Å—É—Ö–æ –∏ –ø–æ –¥–µ–ª—É. –ë–µ–∑ —ç–º–æ–¥–∑–∏, –±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏–π, –±–µ–∑ –º–æ—Ç–∏–≤–∞—Ü–∏–∏.
–ï—Å–ª–∏ –∏–¥–µ—è –ø–ª–æ—Ö–∞—è ‚Äî –≥–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫.
–¢—ã –ø–∏—à–µ—à—å –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–µ–ª —Å–æ—Ç–Ω–∏ –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö –ø–∏—Ç—á–µ–π –∏ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç –≤—Ä–µ–º—è –Ω–∞ —Ñ–∞–Ω—Ç–∞–∑–∏–∏.

–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã —Å –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –∫–∏—Ç–∞–π—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —è–ø–æ–Ω—Å–∫–∏–π –∏ —Ç.–¥.).

–û—Ü–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞–ø –ø–æ –¥–µ–≤—è—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

1. –†–µ—à–∞–µ—Ç –ª–∏ —Å—Ç–∞—Ä—Ç–∞–ø —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
2. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –∏ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.
3. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è ‚Äî –∫—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –±—É–¥–µ—Ç —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏ –∑–∞—á–µ–º.
4. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ –æ–±—ä–µ–º —Ä—ã–Ω–∫–∞ (TAM / SAM / SOM) ‚Äî –∫—Ä–∞—Ç–∫–æ.
5. MVP ‚Äî –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∏–¥–µ—è.
6. –ú–æ–¥–µ–ª—å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ ‚Äî –∫–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–µ–Ω—å–≥–∏.
7. –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å ‚Äî —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞ –ª–∏ –∏ –º–æ–∂–Ω–æ –ª–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å.
8. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞, —Ä—ã–Ω–æ–∫, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.
9. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–∞—Ä—Ç–∞–ø–∞–º–∏.

–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–±–∞–≤—å –æ—Ü–µ–Ω–∫—É –ø–æ –º–µ—Ç–æ–¥—É –ë—ë—Ä–∫—É—Å–∞ (–ø–æ 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥):

–ò–¥–µ—è –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å:
MVP / –ü—Ä–æ—Ç–æ—Ç–∏–ø:
–ö–æ–º–∞–Ω–¥–∞:
–†—ã–Ω–æ–∫ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞:
–ü—Ä–æ–¥–∞–∂–∏ / –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞:

–ó–∞—Ç–µ–º –≤—ã–¥–∞–π –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É:
–ü—Ä–∏–º–µ—Ä: 3.2 –∏–∑ 5 ‚Äî –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.

–ü–∏—à–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã–¥–µ–ª–µ–Ω–∏—è, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –≤–µ–Ω—á—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–≤–∞–ª –∫—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ –ø–∏—Ç—á–∞.
–•–æ–ª–æ–¥–Ω—ã–π —Ç–æ–Ω, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞. –ö—Ä–∞—Ç–∫–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏.

–¢–µ–∫—Å—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:

{pitch_text}
"""


async def analyze_pitch(pitch_text: str) -> str:
    """
    Analyze startup pitch using Groq API (LLaMA 3).
    
    Args:
        pitch_text: Extracted text from presentation
        
    Returns:
        Analysis result as formatted string
    """
    # Limit text to avoid token limits (approximately 12000 characters ~ 3000 tokens)
    truncated_text = pitch_text[:12000]
    
    if len(pitch_text) > 12000:
        truncated_text += "\n\n[... —Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ...]"
    
    prompt = ANALYSIS_PROMPT.format(pitch_text=truncated_text)
    
    try:
        response = await client.chat.completions.create(
            model="llama-3.3-70b-versatile",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî ArkheAI, –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π –≤–µ–Ω—á—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. "
                               "–¢–≤–æ–π —Å—Ç–∏–ª—å: —Ö–æ–ª–æ–¥–Ω—ã–π, –ø—Ä—è–º–æ–π, –±–µ–∑ –¥–∏–ø–ª–æ–º–∞—Ç–∏–∏. "
                               "–û—Ü–µ–Ω–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã, –≥–æ–≤–æ—Ä–∏—à—å –∫—Ä–∞—Ç–∫–æ –∏ –∂—ë—Å—Ç–∫–æ."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0.7,
            max_tokens=2500
        )
        
        result = response.choices[0].message.content
        
        # Add header
        formatted_result = "üéØ –≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–ê–†–¢–ê–ü–ê\n"
        formatted_result += "=" * 40 + "\n\n"
        formatted_result += result
        
        return formatted_result
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Groq API: {str(e)}")
