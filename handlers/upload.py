import os
import re
import uuid
from aiogram import Router, types
from services.file_parser import extract_text_from_file
from services.ai_analyzer import analyze_pitch

router = Router()

def sanitize_filename(filename: str) -> str:
    """
    Sanitize filename by removing special characters and using UUID.
    Preserves the file extension.
    """
    # Get file extension
    _, ext = os.path.splitext(filename)
    # Generate unique filename with UUID
    safe_name = f"{uuid.uuid4().hex}{ext}"
    return safe_name

@router.message(lambda msg: msg.document is not None)
async def handle_file(message: types.Message):
    doc = message.document
    
    # Check file extension
    if not (doc.file_name.lower().endswith('.pdf') or doc.file_name.lower().endswith('.pptx')):
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ PPTX."
        )
        return
    
    # Create temp directory if it doesn't exist
    temp_dir = os.path.abspath("temp")
    os.makedirs(temp_dir, exist_ok=True)
    
    # Sanitize filename to avoid issues with special characters
    safe_filename = sanitize_filename(doc.file_name)
    file_path = os.path.join(temp_dir, safe_filename)
    
    try:
        # Download file
        try:
            await message.bot.download(doc, destination=file_path)
        except Exception as e:
            await message.answer(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–Ω–æ–≤–∞."
            )
            return
        
        # Verify file was downloaded
        if not os.path.exists(file_path):
            await message.answer(
                "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–Ω–æ–≤–∞."
            )
            return
        
        await message.answer(
            "üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏... ‚è≥"
        )
        
        # Extract text from file
        try:
            text = extract_text_from_file(file_path)
        except Exception as e:
            await message.answer(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."
            )
            return
        
        if not text or len(text.strip()) < 50:
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞. "
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
            )
            return
        
        # Analyze with AI
        try:
            result = await analyze_pitch(text)
        except Exception as e:
            await message.answer(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ AI: {str(e)}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # Split long messages if needed (Telegram limit is 4096 characters)
        if len(result) > 4000:
            parts = [result[i:i+4000] for i in range(0, len(result), 4000)]
            for part in parts:
                await message.answer(part)
        else:
            await message.answer(result)
            
    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    finally:
        # Clean up temporary file
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
            except Exception:
                pass  # Ignore cleanup errors
